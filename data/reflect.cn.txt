// Package reflect implements run-time reflection, allowing a program to
// manipulate objects with arbitrary types. The typical use is to take a value
// with static type interface{} and extract its dynamic type information by
// calling TypeOf, which returns a Type.
//
// A call to ValueOf returns a Value representing the run-time data.
// Zero takes a Type and returns a Value representing a zero value
// for that type.
//
// See "The Laws of Reflection" for an introduction to reflection in Go:

// reflect包实现了运行时反射，从而允许程序处理任意类型的对象。 
// 典型的用法是使用静态类型interface{}来获取值，
// 并通过调用TypeOf来提取其动态类型信息，
// 该类型将返回Type。
//
// 调用ValueOf返回一个代表runtime数据的Value。 
// 零采用一个类型，
// 并返回一个表示该类型的零值的值。
//
// 有关Go语言中反射的介绍，请参见“反射法则”：

// Copy copies the contents of src into dst until either
// dst has been filled or src has been exhausted.
// It returns the number of elements copied.
// Dst and src each must have kind Slice or Array, and
// dst and src must have the same element type.
//
// As a special case, src can have kind String if the element type of dst is kind Uint8.

// Copy将src的内容复制到dst中，
// 直到填满dst或用尽src。 
// 它返回复制的元素数。 
// Dst和src每个都必须具有片或数组，
// 而dst和src必须具有相同的元素类型。
//
// 作为一种特殊情况，如果dst的元素类型为Uint8，则src可以具有String类型。

// DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.
// Two values of identical type are deeply equal if one of the following cases applies.
// Values of distinct types are never deeply equal.
//
// Array values are deeply equal when their corresponding elements are deeply equal.
//
// Struct values are deeply equal if their corresponding fields,
// both exported and unexported, are deeply equal.
//
// Func values are deeply equal if both are nil; otherwise they are not deeply equal.
//
// Interface values are deeply equal if they hold deeply equal concrete values.
//
// Map values are deeply equal when all of the following are true:
// they are both nil or both non-nil, they have the same length,
// and either they are the same map object or their corresponding keys
// (matched using Go equality) map to deeply equal values.
//
// Pointer values are deeply equal if they are equal using Go's == operator
// or if they point to deeply equal values.
//
// Slice values are deeply equal when all of the following are true:
// they are both nil or both non-nil, they have the same length,
// and either they point to the same initial entry of the same underlying array
// (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.
// Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))
// are not deeply equal.
//
// Other values - numbers, bools, strings, and channels - are deeply equal
// if they are equal using Go's == operator.
//
// In general DeepEqual is a recursive relaxation of Go's == operator.
// However, this idea is impossible to implement without some inconsistency.
// Specifically, it is possible for a value to be unequal to itself,
// either because it is of func type (uncomparable in general)
// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),
// or because it is an array, struct, or interface containing
// such a value.
// On the other hand, pointer values are always equal to themselves,
// even if they point at or contain such problematic values,
// because they compare equal using Go's == operator, and that
// is a sufficient condition to be deeply equal, regardless of content.
// DeepEqual has been defined so that the same short-cut applies
// to slices and maps: if x and y are the same slice or the same map,
// they are deeply equal regardless of content.
//
// As DeepEqual traverses the data values it may find a cycle. The
// second and subsequent times that DeepEqual compares two pointer
// values that have been compared before, it treats the values as
// equal rather than examining the values to which they point.
// This ensures that DeepEqual terminates.

// DeepEqual报告x和y是否“深度相等”，定义如下。
// 如果满足以下情况之一，则两个相同类型的值将非常相等。
// 不同类型的值永远不会完全相等。
//
// 当数组的相应元素深度相等时，数组值深度相等。
//
// 如果结构的值对应的字段（导出的和未导出的）都非常相等，
// 则该值非常相等。
//
// 如果两者均为零，则Func值将完全相等；否则，它们就不会完全平等。
//
// 如果接口值具有完全相等的具体值，则它们是高度相等的。
//
// 当满足以下所有条件时，映射值深度相等：
// 它们都是nil或都不是nil，
// 它们具有相同的长度，
// 并且它们是相同的映射对象或它们的对应键（使用Go相等匹配）映射到相等的值。
//
// 如果指针值使用Go的==运算符相等，
// 或者它们指向深度相等的值，则它们的深度相等。
//
// 当满足以下所有条件时，切片值将完全相等：
// 它们均为nil或均为非nil，
// 它们具有相同的长度，
// 并且它们指向同一基础数组的相同初始条目（即＆x[0]==＆y[0]）
// 或它们相应的元素（最大长度）相等。
// 请注意， 非nil空片和nil片（例如[]byte{}和[]byte(nil)）并不完全相等。
//
// 如果使用Go的==运算符，
// 其他值（数字，布尔值，字符串和通道）将完全相等。
//
// 通常，DeepEqual是Go的==运算符的递归松弛。
// 但是，如果没有一些不一致，就不可能实现这个想法。
// 具体来说，
// 可能是因为值属于func类型（通常无法比较）
// 或因为它是浮点NaN值（在浮点比较中不等于其自身），
// 或者因为它是包含此类值的数组，
// 结构或接口。
// 另一方面，指针值即使指向或包含此类有问题的值，
// 也始终等于它们自己，
// 因为它们使用Go的==运算符进行相等比较，
// 并且这是充分相等的条件，无论内容如何。
// 定义了DeepEqual，
// 以便对切片和贴图应用相同的快捷方式：
// 如果x和y是相同的切片或相同的贴图，则无论内容如何，​​它们的深度都相等。
//
// 当DeepEqual遍历数据值时，可能会发现一个循环。
// DeepEqual在第二次及以后比较两个之前比较过的指针值时，
// 会将这些值视为相等，
// 而不是检查它们所指向的值。
// 这样可以确保DeepEqual终止。



